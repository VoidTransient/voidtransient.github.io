{"singlePage": ["link"], "startSite": "10/21/2025", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'></script>", "title": "VoidTransient's Blog", "subTitle": "\"We finally reached the end of the world.\"", "avatarUrl": "https://avatars.githubusercontent.com/u/189825951?v=4", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/TEST-1.html", "labels": ["Other"], "postTitle": "TEST-1", "postUrl": "post/TEST-1.html", "postSourceUrl": "https://github.com/VoidTransient/voidtransient.github.io/issues/1", "commentNum": 5, "wordCount": 106, "description": "Just a test...\n\n![Image](https://github.com/user-attachments/assets/450b7baa-ace2-4c46-9cfc-8c22548ec88f)\n\u3002", "top": 0, "createdAt": 1760699447, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/189825951?v=4", "createdDate": "2025-10-17", "dateLabelColor": "#0969da"}, "P2": {"htmlDir": "docs/post/hui-su.html", "labels": ["Algorithm"], "postTitle": "\u56de\u6eaf", "postUrl": "post/hui-su.html", "postSourceUrl": "https://github.com/VoidTransient/voidtransient.github.io/issues/2", "commentNum": 1, "wordCount": 1528, "description": "# BackTrace\n## 1. \u5b50\u96c6\u578b\n```cpp\n//\u8f93\u5165\nint n; cin >> n\nvector<int> a(n);\nfor(int& i : a) cin >> a;\n```\n### (1) Choose Or Not\n```cpp\n//\u751f\u6210\u6240\u6709\u5b50\u96c6\nvector<vector<int> ans;\nvector<int> path;\n\nauto dfs = [&](this auto&& dfs, int i) -> void\n{\n\tif(i == n)\n\t{\n\t\tans.emplace_back(path);\n\t\treturn;\n\t}\n\t\n\tdfs(i + 1);\n\t\n\tpath.push_back(a[i]);\n\tdfs(i + 1);\n\tpath.pop_back();\n};\ndfs(0);\n\n```\n### (2) Enumerate Answer\n```cpp\nvector<vector<int> ans;\nvector<int> path;\n\nauto dfs = [&](this auto&& dfs, int i) -> void\n{\n\tans.emplace_back(path);\n\t\n\tfor(int j = i; j < n; j++)\n\t{\n\t\tpath.push_back(a[j]);\n\t\tdfs(j + 1);\n\t\tpath.pop_back();\n\t}\n};\ndfs(0);\n```\n\n### (3) \u4e8c\u8fdb\u5236\u679a\u4e3e(?)\n```cpp\nvector<vector<int>> ans(1 << n);\n\t\nfor(int i = 0; i < (1 << n); i++)\n\tfor(int j = 0; j < n; j++)\n\t\tif(i >> j & 1) \n\t\t\tans[i].push_back(a[j]);\n\n```\n\n## 2. \u7ec4\u5408\u578b\n```cpp\nvector<vector<int>> ans;\nvector<int> path;\n\nauto dfs = [&](this auto&& dfs, int i) -> void\n{\n\tif(path.size() == k)\n\t{\n\t\tans.push_back(path);\n\t\treturn;\n\t}\n\t\n\tif(path.size() + n - i + 1 < k) return;\n\t\n\tdfs(i + 1);\n\t\n\tpath.push_back(i);\n\tdfs(i + 1);\n\tpath.pop_back();\n};\n\ndfs(1);\n```\n\n## 3. \u6392\u5217\u578b\n```cpp\nvector<vector<int>> ans;\nvector<int> path(n);//\u91c7\u7528\u8986\u76d6\u5199\u6cd5\uff0c\u4f7f\u7528used\u6765\u8bb0\u5f55\u4f7f\u7528\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0d\u7528\u6062\u590dpath\nvector<bool> used(n);//\u9ed8\u8ba4\u5168\u90e8\u521d\u59cb\u5316\u4e3afalse\n\nauto dfs = [&](this auto&& dfs, int i) -> void\n{\n\tif(i == n)\n\t{\n\t\tans.emplace_back(path);\n\t\treturn;\n\t}\n\t\n\tfor(int j = 0; j < n; i++)\n\t{\n\t\tif(!used[j])\n\t\t{\n\t\t\tpath[i] = nums[j];//\u7b2ci\u4e2a\u4f4d\u7f6e = [0, n)\n\t\t\tused[j] = true;\n\t\t\tdfs(i + 1);//\u679a\u4e3e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n\t\t\tused[j] = false;\n\t\t}\n\t}\n};\n//dfs(i)\u8868\u793a\u679a\u4e3e\u7b2ci\u4e2a\u4f4d\u7f6e\ndfs(0);\n```\n\u3002", "top": 0, "createdAt": 1760702636, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/189825951?v=4", "createdDate": "2025-10-17", "dateLabelColor": "#0969da"}, "P4": {"htmlDir": "docs/post/zui-duan-lu.html", "labels": ["Algorithm"], "postTitle": "\u6700\u77ed\u8def", "postUrl": "post/zui-duan-lu.html", "postSourceUrl": "https://github.com/VoidTransient/voidtransient.github.io/issues/4", "commentNum": 0, "wordCount": 5852, "description": "# Dijkstra With Heap Optimization\n\n>[!NOTE]\n>\u7c7b\u578b\uff1a$\u5355\u6e90\u6700\u77ed\u8def$ \n>\u9002\u7528\uff1a$\u975e\u8d1f\u6743\u56fe$\n>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n + m) \\log_2 n)$\n>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n + m)$\n\n```cpp\nstruct edge\n{\n\u00a0 \u00a0 int v, w;\n};\n\nstruct node\n{\n\u00a0 \u00a0 int dis, u;\n\u00a0 \u00a0 bool operator>(const node &a) const { return dis > a.dis; }\n};\n  \nvector<vector<edge>> e;\nvector<int> dis, pre;\nvector<bool> vis;\n  \n// \u56de\u6eaf a \u5230 b \u7684\u6700\u77ed\u8def\u5f84\nvector<int> get_path(int a, int b)\n{\n\u00a0 \u00a0 if (dis[b] == INF) return {}; \u00a0// \u4e0d\u53ef\u8fbe\uff0c\u8fd4\u56de\u7a7a\n\u00a0 \u00a0 vector<int> res;\n\u00a0 \u00a0 for (int cur = b; cur != a; cur = pre[cur])\n\u00a0 \u00a0 \u00a0 \u00a0 res.push_back(cur);\n\u00a0 \u00a0 res.push_back(a);\n\u00a0 \u00a0 reverse(all(res));\n\u00a0 \u00a0 return res;\n}\n\nvoid dijkstra(int s, int n)\n{\n\u00a0 \u00a0 dis.assign(n + 1, INF);\n\u00a0 \u00a0 vis.assign(n + 1, false);\n\u00a0 \u00a0 pre.assign(n + 1, -1);\n  \n\u00a0 \u00a0 dis[s] = 0;\n\u00a0 \u00a0 priority_queue<node, vector<node>, greater<node>> q;\n\u00a0 \u00a0 q.push({0, s});\n\u00a0 \u00a0 \n\u00a0 \u00a0 while (!q.empty())\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 int u = q.top().u;\n\u00a0 \u00a0 \u00a0 \u00a0 q.pop();\n\n\u00a0 \u00a0 \u00a0 \u00a0 if (vis[u]) continue;\n\u00a0 \u00a0 \u00a0 \u00a0 vis[u] = true;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for (auto& [v, w] : e[u])\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (dis[v] > dis[u] + w)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dis[v] = dis[u] + w;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pre[v] = u; \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 q.push({dis[v], v});\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n}\n\nvoid solve()\n{\n\u00a0 \u00a0 int n, m;\n\u00a0 \u00a0 cin >> n >> m;\n\n\u00a0 \u00a0 e.assign(n + 1, vector<edge>());\n\n\u00a0 \u00a0 for (int i = 0; i < m; i++)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 int u, v, w;\n\u00a0 \u00a0 \u00a0 \u00a0 cin >> u >> v >> w;\n\u00a0 \u00a0 \u00a0 \u00a0 e[u].push_back({v, w});\n\u00a0 \u00a0 \u00a0 \u00a0 e[v].push_back({u, w}); \u00a0// \u65e0\u5411\u56fe\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 int a, b;\n\u00a0 \u00a0 cin >> a >> b;\n  \n\u00a0 \u00a0 dijkstra(a, n); // \u8d77\u70b9\uff0c\u9876\u70b9\u6570\n  \n\u00a0 \u00a0 vector<int> path = get_path(a, b);\n\n\u00a0 \u00a0 if (path.empty()) cout << -1 << endl;\n\u00a0 \u00a0 else vD(path);\n}\n```\n# Floyd\n\n>[!NOTE]\n>\u7c7b\u578b\uff1a$\u591a\u6e90\u6700\u77ed\u8def$ \n>\u9002\u7528\uff1a$\u53ef\u542b\u8d1f\u6743\u8fb9\uff0c\u4f46\u4e0d\u80fd\u6709\u8d1f\u73af\uff0cn \\leq 400$\n>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^3)$\n>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$\n\n```cpp\nvector<vector<int>> dist; \u00a0// dist[i][j] = i\u5230j\u7684\u6700\u77ed\u8ddd\u79bb\nvector<vector<int>> path; \u00a0// path[i][j] = i\u5230j\u7684\u6700\u77ed\u8def\u5f84\u4e2dj\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n\n// \u56de\u6eafa\u5230b\u7684\u6700\u77ed\u8def\u5f84\nvector<int> get_path(int a, int b)\n{\n\u00a0 \u00a0 if (dist[a][b] == INF) return {}; \u00a0// \u4e0d\u53ef\u8fbe\n\u00a0 \u00a0 vector<int> res;\n\u00a0 \u00a0 for (int cur = b; cur != a; cur = path[a][cur])\n\u00a0 \u00a0 \u00a0 \u00a0 res.push_back(cur);\n\u00a0 \u00a0 res.push_back(a); \u00a0\n\u00a0 \u00a0 reverse(all(res)); \u00a0\n\u00a0 \u00a0 return res;\n}\n\nvoid floyd(int n)\n{\n\u00a0 \u00a0 for (int i = 1; i <= n; i++)\n\u00a0 \u00a0 \u00a0 \u00a0 for (int j = 1; j <= n; j++)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path[i][j] = i != j && dist[i][j] != INF ? i : -1;\n\n\u00a0 \u00a0 for (int k = 1; k <= n; k++)\n\u00a0 \u00a0 \u00a0 \u00a0 for (int i = 1; i <= n; i++)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int j = 1; j <= n; j++)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (dist[i][k] + dist[k][j] < dist[i][j])\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dist[i][j] = dist[i][k] + dist[k][j];\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path[i][j] = path[k][j]; \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n}\n\nvoid solve()\n{\n\u00a0 \u00a0 int n, m;\n\u00a0 \u00a0 cin >> n >> m;\n\n\u00a0 \u00a0 dist.assign(n + 1, vector<int>(n + 1, INF));\n\u00a0 \u00a0 path.assign(n + 1, vector<int>(n + 1, -1));\n\u00a0 \u00a0 for (int i = 1; i <= n; i++)\n\u00a0 \u00a0 \u00a0 \u00a0 dist[i][i] = 0; \u00a0\n\n\u00a0 \u00a0 for (int i = 0; i < m; i++)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 int u, v, w;\n\u00a0 \u00a0 \u00a0 \u00a0 cin >> u >> v >> w;\n\u00a0 \u00a0 \u00a0 \u00a0 if (w < dist[u][v])\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dist[u][v] = w;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dist[v][u] = w; \u00a0// \u65e0\u5411\u56fe\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 floyd(n);\n\n\u00a0 \u00a0 int a, b;\n\u00a0 \u00a0 cin >> a >> b;\n\n\u00a0 \u00a0 vector<int> res = get_path(a, b);\n\n\u00a0 \u00a0 if (res.empty()) cout << -1 << endl; \u00a0\n\u00a0 \u00a0 else vD(res); \u00a0\n}\n```\n# SPFA (Bellman\u2013Ford With Queue Optimization)\n\n>[!NOTE]\n>\u7c7b\u578b\uff1a$\u5355\u6e90\u6700\u77ed\u8def$\n>\u9002\u7528\uff1a$\u53ef\u542b\u8d1f\u6743\u8fb9\uff0c\u4f46\u4e0d\u5141\u8bb8\u5b58\u5728$**\u4ece\u8d77\u70b9\u53ef\u8fbe\u7684\u8d1f\u73af**\n>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m) ~ O(nm)$\n>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n + m)$\n\n```cpp\nstruct edge\n{\n\u00a0 \u00a0 int v, w;\n};\n  \nvector<vector<edge>> e;\nvector<int> dis, cnt, pre;\nvector<bool> vis;\n\n// \u56de\u6eaf a \u5230 b \u7684\u6700\u77ed\u8def\u5f84\uff08\u9700\u786e\u4fdd\u65e0\u8d1f\u73af\u4e14\u53ef\u8fbe\uff09\nvector<int> get_path(int a, int b)\n{\n\u00a0 \u00a0 if (dis[b] == INF) return {};\n\u00a0 \u00a0 vector<int> res;\n\u00a0 \u00a0 for (int cur = b; cur != a; cur = pre[cur])\n\u00a0 \u00a0 \u00a0 \u00a0 res.push_back(cur);\n\u00a0 \u00a0 res.push_back(a);\n\u00a0 \u00a0 reverse(all(res));\n\u00a0 \u00a0 return res;\n}\n\nbool spfa(int s, int n)\n{\n\u00a0 \u00a0 dis.assign(n + 1, INF);\n\u00a0 \u00a0 cnt.assign(n + 1, 0);\n\u00a0 \u00a0 vis.assign(n + 1, false);\n\u00a0 \u00a0 pre.assign(n + 1, -1);\n\n\u00a0 \u00a0 dis[s] = 0;\n\u00a0 \u00a0 vis[s] = true;\n\u00a0 \u00a0 queue<int> q;\n\u00a0 \u00a0 q.push(s);\n\n\u00a0 \u00a0 while (!q.empty())\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 int u = q.front();\n\u00a0 \u00a0 \u00a0 \u00a0 q.pop();\n\u00a0 \u00a0 \u00a0 \u00a0 vis[u] = false;\n\u00a0 \u00a0 \u00a0 \u00a0 for (auto [v, w] : e[u])\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (dis[v] > dis[u] + w)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dis[v] = dis[u] + w;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pre[v] = u; \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cnt[v] = cnt[u] + 1;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (cnt[v] >= n) return false; \u00a0// \u5b58\u5728\u8d1f\u73af\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!vis[v])\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 q.push(v);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 vis[v] = true;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 \u00a0 return true; \u00a0// \u65e0\u8d1f\u73af\n}\n\nvoid solve()\n{\n\u00a0 \u00a0 int n, m;\n\u00a0 \u00a0 cin >> n >> m;\n\n\u00a0 \u00a0 e.assign(n + 1, vector<edge>());\n\n\u00a0 \u00a0 for (int i = 0; i < m; i++)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 int u, v, w;\n\u00a0 \u00a0 \u00a0 \u00a0 cin >> u >> v >> w;\n\u00a0 \u00a0 \u00a0 \u00a0 e[u].push_back({v, w});\n\u00a0 \u00a0 \u00a0 \u00a0 e[v].push_back({u, w}); \u00a0// \u65e0\u5411\u56fe\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 int a, b;\n\u00a0 \u00a0 cin >> a >> b;\n\n\u00a0 \u00a0 bool has_negative_cycle = !spfa(a, n); // \u8d77\u70b9\uff0c\u9876\u70b9\u6570\n\n\u00a0 \u00a0 if (has_negative_cycle) cout << '\u4e0d\u597d!\u6709\u8d1f\u73af!' << endl;\n\u00a0 \u00a0 else\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 vector<int> path = get_path(a, b);\n\n\u00a0 \u00a0 \u00a0 \u00a0 if (path.empty()) cout << -1 << endl;\n\u00a0 \u00a0 \u00a0 \u00a0 else vD(path);\n\u00a0 \u00a0 }\n}\n```\n\n# Other\n```cpp\n#include <bits/stdc++.h>\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f3f\n#define MOD 1000000007\n#define mod 998244353\n#define all(_x) _x.begin(), _x.end()\n#define vcin(_x) for(auto& _i : _x) cin >> _i\n#define vvcin(_x) for(auto& _j : _x) for(auto& _i : _j) cin >> _i\n#define D(_x) cout << _x << endl\n#define vD(_x) for(int _i = 0; _i < _x.size(); _i++) cout << _x[_i] << ' \\n'[_i == _x.size() - 1]\n#define input(n, a) int n; cin >> n; vector<int> a(n); vcin(a)\n#define YES cout << 'YES' << endl\n#define NO cout << 'NO' << endl\n#define Yes cout << 'Yes' << endl\n#define No cout << 'No' << endl\n#define yes cout << 'yes' << endl\n#define no cout << 'no' << endl\nusing namespace std;\n\n#define int long long\n#define endl '\\n'\n\nvoid solve()\n{\n\t//Code\n}\n\nsigned main()\n{\n\u00a0 \u00a0 ios::sync_with_stdio(false);\n\u00a0 \u00a0 cin.tie(nullptr);\n\u00a0 \u00a0 int _ = 1;\ncin >> _;\n\u00a0 \u00a0 while (_--)\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 return 0;\n}\n```\n\n>[!IMPORTANT]\n>solve()\u4e2d\u7684\u4ee3\u7801\u4e3a\u8c03\u7528\u793a\u4f8b\n\u3002", "top": 0, "createdAt": 1761570985, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/189825951?v=4", "createdDate": "2025-10-27", "dateLabelColor": "#0969da"}}, "singeListJson": {"P3": {"htmlDir": "docs/link.html", "labels": ["link"], "postTitle": "\u53cb\u60c5\u94fe\u63a5", "postUrl": "link.html", "postSourceUrl": "https://github.com/VoidTransient/voidtransient.github.io/issues/3", "commentNum": 0, "wordCount": 266, "description": " # \u53cb\u60c5\u94fe\u63a5\n> [!NOTE]\n> \u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6709\u610f\u601d\u7684\u94fe\u63a5~ QwQ\n\n**\u6211\u7684\u53cb\u94fe**\n - [chengzisoft](https://www.chengzisoft.top/) \u4e16\u754c\u62ef\u6551\u6280\u672f\u5b85\n - \n\n\n> [!IMPORTANT]\n> **\u53cb\u94fe\u7533\u8bf7\u8981\u6c42\uff1a**\n> \n> \u2705 \u7f51\u7ad9\u80fd\u591f\u6b63\u5e38\u8bbf\u95ee\n> \u2705 \u7f51\u7ad9\u7c7b\u578b\u4e3a\u4e2a\u4eba\u535a\u5ba2\n> \u2705 \u7f51\u7ad9\u9700\u8981\u5305\u542b\u672c\u7ad9\u53cb\u94fe\n> \u274c \u4e0d\u63a5\u53d7\u5546\u4e1a\u6027\u6216\u5305\u542b\u4fb5\u5165\u6027\u5e7f\u544a\u7684\u7ad9\u70b9\n> \u274c \u4e0d\u63a5\u53d7\u8fdd\u53cd\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6cd5\u5f8b\u6cd5\u89c4\u7684\u7ad9\u70b9\n> \n> _\u5982\u679c\u7b26\u5408\u5982\u4e0a\u6761\u4ef6\uff0c\u53ef\u5728\u672c\u9875\u9762\u8bc4\u8bba\u533a\u7559\u8a00\u60a8\u7684\u53cb\u94fe\u4fe1\u606f OvO_\u3002", "top": 0, "createdAt": 1760990297, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style>", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/189825951?v=4", "createdDate": "2025-10-21", "dateLabelColor": "#0969da"}}, "labelColorDict": {"about": "#8ba104", "Algorithm": "#0e8a16", "bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "link": "#b60205", "Other": "#435f7f", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "VoidTransient's Blog", "faviconUrl": "https://avatars.githubusercontent.com/u/189825951?v=4", "ogImage": "https://avatars.githubusercontent.com/u/189825951?v=4", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://voidtransient.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}